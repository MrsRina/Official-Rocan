package me.rina.rocan.client.module.exploit;

import me.rina.rocan.api.module.Module;
import me.rina.rocan.api.module.impl.ModuleCategory;
import me.rina.rocan.api.module.registry.Registry;
import me.rina.rocan.api.setting.value.ValueBoolean;
import me.rina.rocan.client.event.network.PacketEvent;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

/**
 * @author SrRina
 * @since 27/02/2021 at 12:37
 **/
@Registry(name = "Cancel Packets", tag = "CancelPackets", description = "Explore exploits canceling packets.", category = ModuleCategory.EXPLOIT)
public class ModuleCancelPackets extends Module {
    public static ValueBoolean settingResetAll = new ValueBoolean("Reset All", "ResetAll", "Reset all settings to false.", false);

    /* Server. */
    public static ValueBoolean settingSPacketAdvancementInfo = new ValueBoolean("SPacketAdvancementInfo", "SPacketAdvancementInfo", "An packet event.", false);
    public static ValueBoolean settingSPacketAnimation = new ValueBoolean("SPacketAnimation", "SPacketAnimation", "An packet event.", false);
    public static ValueBoolean settingSPacketBlockAction = new ValueBoolean("SPacketBlockAction", "SPacketBlockAction", "An packet event.", false);
    public static ValueBoolean settingSPacketBlockBreakAnim = new ValueBoolean("SPacketBlockBreakAnim", "SPacketBlockBreakAnim", "An packet event.", false);
    public static ValueBoolean settingSPacketBlockChange = new ValueBoolean("SPacketBlockChange", "SPacketBlockChange", "An packet event.", false);
    public static ValueBoolean settingSPacketCamera = new ValueBoolean("SPacketCamera", "SPacketCamera", "An packet event.", false);
    public static ValueBoolean settingSPacketChangeGameState = new ValueBoolean("SPacketChangeGameState", "SPacketChangeGameState", "An packet event.", false);
    public static ValueBoolean settingSPacketChat = new ValueBoolean("SPacketChat", "SPacketChat", "An packet event.", false);
    public static ValueBoolean settingSPacketChunkData = new ValueBoolean("SPacketChunkData", "SPacketChunkData", "An packet event.", false);
    public static ValueBoolean settingSPacketCloseWindow = new ValueBoolean("SPacketCloseWindow", "SPacketCloseWindow", "An packet event.", false);
    public static ValueBoolean settingSPacketCollectItem = new ValueBoolean("SPacketCollectItem", "SPacketCollectItem", "An packet event.", false);
    public static ValueBoolean settingSPacketCombatEvent = new ValueBoolean("SPacketCombatEvent", "SPacketCombatEvent", "An packet event.", false);
    public static ValueBoolean settingSPacketConfirmTransaction = new ValueBoolean("SPacketConfirmTransaction", "SPacketConfirmTransaction", "An packet event.", false);
    public static ValueBoolean settingSPacketCooldown = new ValueBoolean("SPacketCooldown", "SPacketCooldown", "An packet event.", false);
    public static ValueBoolean settingSPacketCustomPayload = new ValueBoolean("SPacketCustomPayload", "SPacketCustomPayload", "An packet event.", false);
    public static ValueBoolean settingSPacketCustomSound = new ValueBoolean("SPacketCustomSound", "SPacketCustomSound", "An packet event.", false);
    public static ValueBoolean settingSPacketDestroyEntities = new ValueBoolean("SPacketDestroyEntities", "SPacketDestroyEntities", "An packet event.", false);
    public static ValueBoolean settingSPacketDisconnect = new ValueBoolean("SPacketDisconnect", "SPacketDisconnect", "An packet event.", false);
    public static ValueBoolean settingSPacketDisplayObjective = new ValueBoolean("SPacketDisplayObjective", "SPacketDisplayObjective", "An packet event.", false);
    public static ValueBoolean settingSPacketEffect = new ValueBoolean("SPacketEffect", "SPacketEffect", "An packet event.", false);
    public static ValueBoolean settingSPacketEntity = new ValueBoolean("SPacketEntity", "SPacketEntity", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityAttach = new ValueBoolean("SPacketEntityAttach", "SPacketEntityAttach", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityEffect = new ValueBoolean("SPacketEntityEffect", "SPacketEntityEffect", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityEquipment = new ValueBoolean("SPacketEntityEquipment", "SPacketEntityEquipment", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityHeadLook = new ValueBoolean("SPacketEntityHeadLook", "SPacketEntityHeadLook", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityMetadata = new ValueBoolean("SPacketEntityMetadata", "SPacketEntityMetadata", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityProperties = new ValueBoolean("SPacketEntityProperties", "SPacketEntityProperties", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityStatus = new ValueBoolean("SPacketEntityStatus", "SPacketEntityStatus", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityTeleport = new ValueBoolean("SPacketEntityTeleport", "SPacketEntityTeleport", "An packet event.", false);
    public static ValueBoolean settingSPacketEntityVelocity = new ValueBoolean("SPacketEntityVelocity", "SPacketEntityVelocity", "An packet event.", false);
    public static ValueBoolean settingSPacketExplosion = new ValueBoolean("SPacketExplosion", "SPacketExplosion", "An packet event.", false);
    public static ValueBoolean settingSPacketHeldItemChange = new ValueBoolean("SPacketHeldItemChange", "SPacketHeldItemChange", "An packet event.", false);
    public static ValueBoolean settingSPacketJoinGame = new ValueBoolean("SPacketJoinGame", "SPacketJoinGame", "An packet event.", false);
    public static ValueBoolean settingSPacketKeepAlive = new ValueBoolean("SPacketKeepAlive", "SPacketKeepAlive", "An packet event.", false);
    public static ValueBoolean settingSPacketMaps = new ValueBoolean("SPacketMaps", "SPacketMaps", "An packet event.", false);
    public static ValueBoolean settingSPacketMoveVehicle = new ValueBoolean("SPacketMoveVehicle", "SPacketMoveVehicle", "An packet event.", false);
    public static ValueBoolean settingSPacketMultiBlockChange = new ValueBoolean("SPacketMultiBlockChange", "SPacketMultiBlockChange", "An packet event.", false);
    public static ValueBoolean settingSPacketOpenWindow = new ValueBoolean("SPacketOpenWindow", "SPacketOpenWindow", "An packet event.", false);
    public static ValueBoolean settingSPacketParticles = new ValueBoolean("SPacketParticles", "SPacketParticles", "An packet event.", false);
    public static ValueBoolean settingSPacketPlaceGhostRecipe = new ValueBoolean("SPacketPlaceGhostRecipe", "SPacketPlaceGhostRecipe", "An packet event.", false);
    public static ValueBoolean settingSPacketPlayerAbilities = new ValueBoolean("SPacketPlayerAbilities", "SPacketPlayerAbilities", "An packet event.", false);
    public static ValueBoolean settingSPacketPlayerListHeaderFooter = new ValueBoolean("SPacketPlayerListHeaderFooter", "SPacketPlayerListHeaderFooter", "An packet event.", false);
    public static ValueBoolean settingSPacketPlayerListItem = new ValueBoolean("SPacketPlayerListItem", "SPacketPlayerListItem", "An packet event.", false);
    public static ValueBoolean settingSPacketPlayerPosLook = new ValueBoolean("SPacketPlayerPosLook", "SPacketPlayerPosLook", "An packet event.", false);
    public static ValueBoolean settingSPacketRecipeBook = new ValueBoolean("SPacketRecipeBook", "SPacketRecipeBook", "An packet event.", false);
    public static ValueBoolean settingSPacketRemoveEntityEffect = new ValueBoolean("SPacketRemoveEntityEffect", "SPacketRemoveEntityEffect", "An packet event.", false);
    public static ValueBoolean settingSPacketResourcePackSend = new ValueBoolean("SPacketResourcePackSend", "SPacketResourcePackSend", "An packet event.", false);
    public static ValueBoolean settingSPacketRespawn = new ValueBoolean("SPacketRespawn", "SPacketRespawn", "An packet event.", false);
    public static ValueBoolean settingSPacketScoreboardObjective = new ValueBoolean("SPacketScoreboardObjective", "SPacketScoreboardObjective", "An packet event.", false);
    public static ValueBoolean settingSPacketSelectAdvancementsTab = new ValueBoolean("SPacketSelectAdvancementsTab", "SPacketSelectAdvancementsTab", "An packet event.", false);
    public static ValueBoolean settingSPacketServerDifficulty = new ValueBoolean("SPacketServerDifficulty", "SPacketServerDifficulty", "An packet event.", false);
    public static ValueBoolean settingSPacketSetExperience = new ValueBoolean("SPacketSetExperience", "SPacketSetExperience", "An packet event.", false);
    public static ValueBoolean settingSPacketSetPassengers = new ValueBoolean("SPacketSetPassengers", "SPacketSetPassengers", "An packet event.", false);
    public static ValueBoolean settingSPacketSetSlot = new ValueBoolean("SPacketSetSlot", "SPacketSetSlot", "An packet event.", false);
    public static ValueBoolean settingSPacketSignEditorOpen = new ValueBoolean("SPacketSignEditorOpen", "SPacketSignEditorOpen", "An packet event.", false);
    public static ValueBoolean settingSPacketSoundEffect = new ValueBoolean("SPacketSoundEffect", "SPacketSoundEffect", "An packet event.", false);
    public static ValueBoolean settingSPacketSpawnExperienceOrb = new ValueBoolean("SPacketSpawnExperienceOrb", "SPacketSpawnExperienceOrb", "An packet event.", false);
    public static ValueBoolean settingSPacketSpawnGlobalEntity = new ValueBoolean("SPacketSpawnGlobalEntity", "SPacketSpawnGlobalEntity", "An packet event.", false);
    public static ValueBoolean settingSPacketSpawnMob = new ValueBoolean("SPacketSpawnMob", "SPacketSpawnMob", "An packet event.", false);
    public static ValueBoolean settingSPacketSpawnObject = new ValueBoolean("SPacketSpawnObject", "SPacketSpawnObject", "An packet event.", false);
    public static ValueBoolean settingSPacketSpawnPainting = new ValueBoolean("SPacketSpawnPainting", "SPacketSpawnPainting", "An packet event.", false);
    public static ValueBoolean settingSPacketSpawnPlayer = new ValueBoolean("SPacketSpawnPlayer", "SPacketSpawnPlayer", "An packet event.", false);
    public static ValueBoolean settingSPacketSpawnPosition = new ValueBoolean("SPacketSpawnPosition", "SPacketSpawnPosition", "An packet event.", false);
    public static ValueBoolean settingSPacketStatistics = new ValueBoolean("SPacketStatistics", "SPacketStatistics", "An packet event.", false);
    public static ValueBoolean settingSPacketTabComplete = new ValueBoolean("SPacketTabComplete", "SPacketTabComplete", "An packet event.", false);
    public static ValueBoolean settingSPacketTeams = new ValueBoolean("SPacketTeams", "SPacketTeams", "An packet event.", false);
    public static ValueBoolean settingSPacketTimeUpdate = new ValueBoolean("SPacketTimeUpdate", "SPacketTimeUpdate", "An packet event.", false);
    public static ValueBoolean settingSPacketTitle = new ValueBoolean("SPacketTitle", "SPacketTitle", "An packet event.", false);
    public static ValueBoolean settingSPacketUnloadChunk = new ValueBoolean("SPacketUnloadChunk", "SPacketUnloadChunk", "An packet event.", false);
    public static ValueBoolean settingSPacketUpdateBossInfo = new ValueBoolean("SPacketUpdateBossInfo", "SPacketUpdateBossInfo", "An packet event.", false);
    public static ValueBoolean settingSPacketUpdateHealth = new ValueBoolean("SPacketUpdateHealth", "SPacketUpdateHealth", "An packet event.", false);
    public static ValueBoolean settingSPacketUpdateScore = new ValueBoolean("SPacketUpdateScore", "SPacketUpdateScore", "An packet event.", false);
    public static ValueBoolean settingSPacketUpdateTileEntity = new ValueBoolean("SPacketUpdateTileEntity", "SPacketUpdateTileEntity", "An packet event.", false);
    public static ValueBoolean settingSPacketUseBed = new ValueBoolean("SPacketUseBed", "SPacketUseBed", "An packet event.", false);
    public static ValueBoolean settingSPacketWindowItems = new ValueBoolean("SPacketWindowItems", "SPacketWindowItems", "An packet event.", false);
    public static ValueBoolean settingSPacketWindowProperty = new ValueBoolean("SPacketWindowProperty", "SPacketWindowProperty", "An packet event.", false);
    public static ValueBoolean settingSPacketWorldBorder = new ValueBoolean("SPacketWorldBorder", "SPacketWorldBorder", "An packet event.", false);
    
    /* Client. */
    public static ValueBoolean settingCPacketAnimation = new ValueBoolean("CPacketAnimation", "CPacketAnimation", "An packet event.", false);
    public static ValueBoolean settingCPacketChatMessage = new ValueBoolean("CPacketChatMessage", "CPacketChatMessage", "An packet event.", false);
    public static ValueBoolean settingCPacketClickWindow = new ValueBoolean("CPacketClickWindow", "CPacketClickWindow", "An packet event.", false);
    public static ValueBoolean settingCPacketClientSettings = new ValueBoolean("CPacketClientSettings", "CPacketClientSettings", "An packet event.", false);
    public static ValueBoolean settingCPacketClientStatus = new ValueBoolean("CPacketClientStatus", "CPacketClientStatus", "An packet event.", false);
    public static ValueBoolean settingCPacketCloseWindows = new ValueBoolean("CPacketCloseWindows", "CPacketCloseWindows", "An packet event.", false);
    public static ValueBoolean settingCPacketConfirmTeleport = new ValueBoolean("CPacketConfirmTeleport", "CPacketConfirmTeleport", "An packet event.", false);
    public static ValueBoolean settingCPacketConfirmTransaction = new ValueBoolean("CPacketConfirmTransactions", "CPacketConfirmTransactions", "An packet event.", false);
    public static ValueBoolean settingCPacketCreativeInventoryAction = new ValueBoolean("CPacketCreativeInventoryAction", "CPacketCreativeInventoryAction", "An packet event.", false);
    public static ValueBoolean settingCPacketCustomPayload = new ValueBoolean("CPacketCustomPayloads", "CPacketCustomPayloads", "An packet event.", false);
    public static ValueBoolean settingCPacketEnchantItem = new ValueBoolean("CPacketEnchantItem", "CPacketEnchantItem", "An packet event.", false);
    public static ValueBoolean settingCPacketEntityAction = new ValueBoolean("CPacketEntityAction", "CPacketEntityAction", "An packet event.", false);
    public static ValueBoolean settingCPacketHeldItemChange = new ValueBoolean("CPacketHeldItemChanges", "CPacketHeldItemChanges", "An packet event.", false);
    public static ValueBoolean settingCPacketInput = new ValueBoolean("CPacketInput", "CPacketInput", "An packet event.", false);
    public static ValueBoolean settingCPacketKeepAlive = new ValueBoolean("CPacketKeepAlive", "CPacketKeepAlive", "An packet event.", false);
    public static ValueBoolean settingCPacketPlaceRecipe = new ValueBoolean("CPacketPlaceRecipe", "CPacketPlaceRecipe", "An packet event.", false);
    public static ValueBoolean settingCPacketPlayer = new ValueBoolean("CPacketPlayer", "CPacketPlayer", "An packet event.", false);
    public static ValueBoolean settingCPacketPlayerAbility = new ValueBoolean("CPacketPlayerAbility", "CPacketPlayerAbility", "An packet event.", false);
    public static ValueBoolean settingCPacketPlayerDigging = new ValueBoolean("CPacketPlayerDigging", "CPacketPlayerDigging", "An packet event.", false);
    public static ValueBoolean settingCPacketPlayerTryUseItem = new ValueBoolean("CPacketPlayerTryUseItem", "CPacketPlayerTryUseItem", "An packet event.", false);
    public static ValueBoolean settingCPacketPlayerTryUseItemOnBlock = new ValueBoolean("CPacketPlayerTryUseItemOnBlock", "CPacketPlayerTryUseItemOnBlock", "An packet event.", false);
    public static ValueBoolean settingCPacketRecipeInfo = new ValueBoolean("CPacketRecipeInfo", "CPacketRecipeInfo", "An packet event.", false);
    public static ValueBoolean settingCPacketResourcePackStatus = new ValueBoolean("CPacketResourcePackStatus", "CPacketResourcePackStatus", "An packet event.", false);
    public static ValueBoolean settingCPacketSeenAdvancements = new ValueBoolean("CPacketSeenAdvancements", "CPacketSeenAdvancements", "An packet event.", false);
    public static ValueBoolean settingCPacketPlayerPacket = new ValueBoolean("CPacketPlayerPacket", "CPacketPlayerPacket", "An packet event.", false);
    public static ValueBoolean settingCPacketSpectate = new ValueBoolean("CPacketSpectate", "CPacketSpectate", "An packet event.", false);
    public static ValueBoolean settingCPacketSteerBoat = new ValueBoolean("CPacketSteerBoat", "CPacketSteerBoat", "An packet event.", false);
    public static ValueBoolean settingCPacketTabComplete = new ValueBoolean("CPacketTabCompletion", "CPacketTabCompletion", "An packet event.", false);
    public static ValueBoolean settingCPacketUpdateSign = new ValueBoolean("CPacketUpdateSign", "CPacketUpdateSign", "An packet event.", false);
    public static ValueBoolean settingCPacketUseEntity = new ValueBoolean("CPacketUseEntity", "CPacketUseEntity", "An packet event.", false);
    public static ValueBoolean settingCPacketVehicleMove = new ValueBoolean("CPacketVehicleMove", "CPacketVehicleMove", "An packet event.", false);

    @Override
    public void onSetting() {
        if (settingResetAll.getValue()) {
            // Disable all settings.
            settingSPacketAdvancementInfo.setValue(false);
            settingSPacketAnimation.setValue(false);
            settingSPacketBlockAction.setValue(false);
            settingSPacketBlockBreakAnim.setValue(false);
            settingSPacketBlockChange.setValue(false);
            settingSPacketCamera.setValue(false);
            settingSPacketChangeGameState.setValue(false);
            settingSPacketChat.setValue(false);
            settingSPacketChunkData.setValue(false);
            settingSPacketCloseWindow.setValue(false);
            settingSPacketCollectItem.setValue(false);
            settingSPacketCombatEvent.setValue(false);
            settingSPacketConfirmTransaction.setValue(false);
            settingSPacketCooldown.setValue(false);
            settingSPacketCustomPayload.setValue(false);
            settingSPacketCustomSound.setValue(false);
            settingSPacketDestroyEntities.setValue(false);
            settingSPacketDisconnect.setValue(false);
            settingSPacketDisplayObjective.setValue(false);
            settingSPacketEffect.setValue(false);
            settingSPacketEntity.setValue(false);
            settingSPacketEntityAttach.setValue(false);
            settingSPacketEntityEffect.setValue(false);
            settingSPacketEntityEquipment.setValue(false);
            settingSPacketEntityHeadLook.setValue(false);
            settingSPacketEntityMetadata.setValue(false);
            settingSPacketEntityProperties.setValue(false);
            settingSPacketEntityStatus.setValue(false);
            settingSPacketEntityTeleport.setValue(false);
            settingSPacketEntityVelocity.setValue(false);
            settingSPacketExplosion.setValue(false);
            settingSPacketHeldItemChange.setValue(false);
            settingSPacketJoinGame.setValue(false);
            settingSPacketKeepAlive.setValue(false);
            settingSPacketMaps.setValue(false);
            settingSPacketMoveVehicle.setValue(false);
            settingSPacketMultiBlockChange.setValue(false);
            settingSPacketOpenWindow.setValue(false);
            settingSPacketParticles.setValue(false);
            settingSPacketPlaceGhostRecipe.setValue(false);
            settingSPacketPlayerAbilities.setValue(false);
            settingSPacketPlayerListHeaderFooter.setValue(false);
            settingSPacketPlayerListItem.setValue(false);
            settingSPacketPlayerPosLook.setValue(false);
            settingSPacketRecipeBook.setValue(false);
            settingSPacketRemoveEntityEffect.setValue(false);
            settingSPacketResourcePackSend.setValue(false);
            settingSPacketRespawn.setValue(false);
            settingSPacketScoreboardObjective.setValue(false);
            settingSPacketSelectAdvancementsTab.setValue(false);
            settingSPacketServerDifficulty.setValue(false);
            settingSPacketSetExperience.setValue(false);
            settingSPacketSetPassengers.setValue(false);
            settingSPacketSetSlot.setValue(false);
            settingSPacketSignEditorOpen.setValue(false);
            settingSPacketSoundEffect.setValue(false);
            settingSPacketSpawnExperienceOrb.setValue(false);
            settingSPacketSpawnGlobalEntity.setValue(false);
            settingSPacketSpawnMob.setValue(false);
            settingSPacketSpawnObject.setValue(false);
            settingSPacketSpawnPainting.setValue(false);
            settingSPacketSpawnPlayer.setValue(false);
            settingSPacketSpawnPosition.setValue(false);
            settingSPacketStatistics.setValue(false);
            settingSPacketTabComplete.setValue(false);
            settingSPacketTeams.setValue(false);
            settingSPacketTimeUpdate.setValue(false);
            settingSPacketTitle.setValue(false);
            settingSPacketUnloadChunk.setValue(false);
            settingSPacketUpdateBossInfo.setValue(false);
            settingSPacketUpdateHealth.setValue(false);
            settingSPacketUpdateScore.setValue(false);
            settingSPacketUpdateTileEntity.setValue(false);
            settingSPacketUseBed.setValue(false);
            settingSPacketWindowItems.setValue(false);
            settingSPacketWindowProperty.setValue(false);
            settingSPacketWorldBorder.setValue(false);
            settingCPacketAnimation.setValue(false);
            settingCPacketChatMessage.setValue(false);
            settingCPacketClickWindow.setValue(false);
            settingCPacketClientSettings.setValue(false);
            settingCPacketClientStatus.setValue(false);
            settingCPacketCloseWindows.setValue(false);
            settingCPacketConfirmTeleport.setValue(false);
            settingCPacketConfirmTransaction.setValue(false);
            settingCPacketCreativeInventoryAction.setValue(false);
            settingCPacketCustomPayload.setValue(false);
            settingCPacketEnchantItem.setValue(false);
            settingCPacketEntityAction.setValue(false);
            settingCPacketHeldItemChange.setValue(false);
            settingCPacketInput.setValue(false);
            settingCPacketKeepAlive.setValue(false);
            settingCPacketPlaceRecipe.setValue(false);
            settingCPacketPlayer.setValue(false);
            settingCPacketPlayerAbility.setValue(false);
            settingCPacketPlayerDigging.setValue(false);
            settingCPacketPlayerTryUseItem.setValue(false);
            settingCPacketPlayerTryUseItemOnBlock.setValue(false);
            settingCPacketRecipeInfo.setValue(false);
            settingCPacketResourcePackStatus.setValue(false);
            settingCPacketSeenAdvancements.setValue(false);
            settingCPacketPlayerPacket.setValue(false);
            settingCPacketSpectate.setValue(false);
            settingCPacketSteerBoat.setValue(false);
            settingCPacketTabComplete.setValue(false);
            settingCPacketUpdateSign.setValue(false);
            settingCPacketUseEntity.setValue(false);
            settingCPacketVehicleMove.setValue(false);

            // End if.
            this.setDisabled();
            settingResetAll.setValue(false);
        }
    }

    @Listener
    public void onListenSendPacket(PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketAnimation && settingSPacketAnimation.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketChatMessage && settingCPacketChatMessage.getValue()) {

            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketClickWindow && settingCPacketClickWindow.getValue()) {

            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketClientSettings && settingCPacketClientSettings.getValue()) {

            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketClientStatus && settingCPacketClientStatus.getValue()) {

            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketCloseWindow && settingCPacketCloseWindows.getValue()) {

            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketConfirmTeleport && settingCPacketConfirmTeleport.getValue()) {

            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketConfirmTransaction && settingCPacketConfirmTransaction.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketCreativeInventoryAction && settingCPacketCreativeInventoryAction.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketCustomPayload && settingCPacketCustomPayload.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketEnchantItem && settingCPacketEnchantItem.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketEntityAction && settingCPacketEntityAction.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketHeldItemChange && settingCPacketHeldItemChange.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketInput && settingCPacketInput.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketKeepAlive && settingCPacketKeepAlive.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketPlaceRecipe && settingCPacketPlaceRecipe.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketPlayer && settingCPacketPlayer.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketPlayerAbilities && settingCPacketPlayerAbility.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketPlayerDigging && settingCPacketPlayerDigging.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketPlayerTryUseItem && settingCPacketPlayerTryUseItem.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && settingCPacketPlayerTryUseItemOnBlock.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketRecipeInfo && settingCPacketRecipeInfo.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketResourcePackStatus && settingCPacketResourcePackStatus.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketSeenAdvancements && settingCPacketSeenAdvancements.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketSpectate && settingCPacketSpectate.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketSteerBoat && settingCPacketSteerBoat.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketTabComplete && settingCPacketTabComplete.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketUpdateSign && settingCPacketUpdateSign.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketUseEntity && settingCPacketUseEntity.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof CPacketVehicleMove && settingCPacketVehicleMove.getValue()) {
            event.setCanceled(true);
        }
    }


    @Listener
    public void onListenReceivePacket(PacketEvent.Receive event) {
        if (event.getPacket() instanceof SPacketAdvancementInfo && settingSPacketAdvancementInfo.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketAnimation && settingSPacketAnimation.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketBlockAction && settingSPacketBlockAction.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketBlockBreakAnim && settingSPacketBlockBreakAnim.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketBlockChange && settingSPacketBlockChange.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCamera && settingSPacketCamera.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketChangeGameState && settingSPacketChangeGameState.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketChat && settingSPacketChat.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketChunkData && settingSPacketChunkData.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCloseWindow && settingSPacketCloseWindow.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCollectItem && settingSPacketCollectItem.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCombatEvent && settingSPacketCombatEvent.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketConfirmTransaction && settingSPacketConfirmTransaction.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCooldown && settingSPacketCooldown.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCustomPayload && settingSPacketCustomPayload.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCustomSound && settingSPacketCustomSound.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketDestroyEntities && settingSPacketDestroyEntities.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketDisconnect && settingSPacketDisconnect.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketChunkData && settingSPacketChunkData.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCloseWindow && settingSPacketCloseWindow.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketCollectItem && settingSPacketCollectItem.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketDisplayObjective && settingSPacketDisplayObjective.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEffect && settingSPacketEffect.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntity && settingSPacketEntity.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityAttach && settingSPacketEntityAttach.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityEffect && settingSPacketEntityEffect.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityEquipment && settingSPacketEntityEquipment.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityHeadLook && settingSPacketEntityHeadLook.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityMetadata && settingSPacketEntityMetadata.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityProperties && settingSPacketEntityProperties.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityStatus && settingSPacketEntityStatus.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityTeleport && settingSPacketEntityTeleport.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityVelocity && settingSPacketEntityVelocity.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketExplosion && settingSPacketExplosion.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketHeldItemChange && settingSPacketHeldItemChange.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketJoinGame && settingSPacketJoinGame.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketKeepAlive && settingSPacketKeepAlive.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketMaps && settingSPacketMaps.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketMoveVehicle && settingSPacketMoveVehicle.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketMultiBlockChange && settingSPacketMultiBlockChange.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketOpenWindow && settingSPacketOpenWindow.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketParticles && settingSPacketParticles.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketPlaceGhostRecipe && settingSPacketPlaceGhostRecipe.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketPlayerAbilities && settingSPacketPlayerAbilities.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketPlayerListHeaderFooter && settingSPacketPlayerListHeaderFooter.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketPlayerListItem && settingSPacketPlayerListItem.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketPlayerPosLook && settingSPacketPlayerPosLook.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketRecipeBook && settingSPacketRecipeBook.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketRemoveEntityEffect && settingSPacketRemoveEntityEffect.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketResourcePackSend && settingSPacketResourcePackSend.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketRespawn && settingSPacketRespawn.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketScoreboardObjective && settingSPacketScoreboardObjective.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSelectAdvancementsTab && settingSPacketSelectAdvancementsTab.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketServerDifficulty && settingSPacketServerDifficulty.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSetExperience && settingSPacketSetExperience.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSetPassengers && settingSPacketSetPassengers.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSetSlot && settingSPacketSetSlot.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSignEditorOpen && settingSPacketSignEditorOpen.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSoundEffect && settingSPacketSoundEffect.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSpawnExperienceOrb && settingSPacketSpawnExperienceOrb.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSpawnGlobalEntity && settingSPacketSpawnGlobalEntity.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSpawnMob && settingSPacketSpawnMob.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSpawnObject && settingSPacketSpawnObject.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSpawnPainting && settingSPacketSpawnPainting.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSpawnPlayer && settingSPacketSpawnPlayer.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketSpawnPosition && settingSPacketSpawnPosition.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketStatistics && settingSPacketStatistics.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketTabComplete && settingSPacketTabComplete.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketTeams && settingSPacketTeams.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketTimeUpdate && settingSPacketTimeUpdate.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketTitle && settingSPacketTitle.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketUnloadChunk && settingSPacketUnloadChunk.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketUpdateBossInfo && settingSPacketUpdateBossInfo.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketUpdateHealth && settingSPacketUpdateHealth.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketUpdateScore && settingSPacketUpdateScore.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketUpdateTileEntity && settingSPacketUpdateTileEntity.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketUseBed && settingSPacketUseBed.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketWindowItems && settingSPacketWindowItems.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketWindowProperty && settingSPacketWindowProperty.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketWorldBorder && settingSPacketWorldBorder.getValue()) {
            event.setCanceled(true);
        }
    }
}
